			 Microservices/Distributed COnfigurations
.....................................................................................

Pattern: Cross Cutting Concerns

The application may require some services which need not be part of application.

Pattern: Microservice chassis:
.............................
When you start the development of an application you often spend a significant amount of time writing the build logic and putting in place the mechanisms to handle cross-cutting concerns

Common CrossCutting Concerns:

1.Configuration
2.Security
3.Logging
4.Moniotoring- Health
5.Metrics
6.Tracing

Microprofile config Specification:

https://download.eclipse.org/microprofile/microprofile-config-3.0/microprofile-config-spec-3.0.html

Quarkus uses "smallyRye MicroProfile Config" implementation.

https://github.com/smallrye/smallrye-config

		 	QuarkusApp
			   |
		  SmallRye Config Implementation
			  |
		   MicroProfile Config spec			
			  |
	         Externalized configuration Spec
                         |
		  Microservice -chassis Spec

Core Concepts:

1.Config Sources:
   The place from where the configuration data is present.

1.(400)-System Properties 
2.(300)-Environment variables
3.(295)".env" File in the current working directory.
4.(260)Quarkus application configuration file - $PWD/config/application.properties 
5.(250)Quarkus application configuration file - src/resources/application.properties    in classpath
6.(100)MicroProfile Config Configuration file META-INF/microprofile-config.properties   in class path
7.Third party configurations
   consul,kubernets,git,external webservers

Configuration values are looked up based on "ordinal value" - Ordinal value.

for i have config data called

message ='hello'

if it has defined in system properties and also env variables, when you read, you will get only system properties.

 Properties are reterived from only highest ordinal value.

"A configuration property lookup starts by the highest ordinal configuration source available and works it way down to other sources until a match is found".


Types of configuration data:

1.Application configuration data
  Data configured by developer
2.Quarkus framework configuration data
  Data provided by quarkus framework
   web related configuration,database related configuration,messaging related  configuration

Syntax;
key.key.key=value

user.name='foo'
quarkus.http.port=9090

1.create project

quarkus create app core-config



configuration source:

src/resources/application.properties
greeting.message=Hello,Rest

Configuration data can be read from Resources or Services

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message")
    String message;
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}
..................................................................................
		 What if the config property not present in the config file
..................................................................................

application.properties

if no property found in any config source, the will throw exception.
.quarkus.runtime.configuration.ConfigurationException: Failed to load config value of type class java.lang.String for: greeting.message

	at io.quarkus.arc.runtime.ConfigRecorder.validateConfigProperties(ConfigRecorder.java:70)
	at io.quarkus.deployment.steps.ConfigBuildStep$validateConfigValues1665125174.deploy_0(Unknown Source)
	at io.quarkus.deployment.steps.ConfigBuildStep$validateConfigValues1665125174.deploy(Unknown Source)

Solution:

Default Property value

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message",defaultValue = "Welcome")
    String message;
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}

...................................................................................
....................................................................................
		 Programmetic way of accessing configuration property
...................................................................................

Without annotation (@ConfigProperty) also we can access config property.

ConfigProvider

src/resources/application.properties
greeting.message=Hello,Quarkus
app.user.name=Subramanian

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Welcome")
    String message;


    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name", String.class).orElse("Sweety");

    }
}
.....................................................................................
											1.(400)-System Properties


System Properties are supplied via commandline using flag -D.

System Properties are supplied 
 ->During dev mode
 ->During prod mode

Now , if you supply "greeting.message" property via System variables/properties, as Per Ordinal value system properties always takes highest priorty. So You will get System properties value only.


package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Welcome")
    String message;


    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name", String.class).orElse("Sweety");

    }
}
Dev Mode:

quarkus dev -Dgreeting.message=Hello,FromSystem

mvnw -Dgreeting.message=Hello,FromSystem compile quarkus:dev
.....................................................................................
			                2.(300)-Environment variables

Reading config data from the "operating system env variables"

Standalone os
1.windows,linux,mac
2.container os - docker

There are many ways to set env variables...

Permentaly we can inside os or temporaryly

In windows 

SET

In Linux/Mac

export

Lab:
 Open command prompt : windows
>SET greeting.message=Hello Env

After setting: Run the app
>quarkus dev


Response:
Hello Env.

..........................................................................................................................................................................
			      .env File(295)
.....................................................................................

Adding env variales via command prompt using set or export or adding into system settings, it is very hard
Once the application changes os, then we need to configure the system settings manually.

".env" file is bridge between operating system env variables and application.

What ever we sepecify inside ".env" file, will be added into operating system when your app boots...

Where should we add env file?
 
core-config
 |
.env

.env file must contain variables which must be UPPERCASE


GREETING_MESSAGE=Hello,From ENV FILE

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name="greeting.message",defaultValue = "Hey")
    String message;
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName(){
        return ConfigProvider.getConfig().getOptionalValue("app.user.name",String.class).orElse("Name");
    }
}

Testing:
http://localhost:8080/hello
Hello From ENV FILE
....................................................................................
  (260)Quarkus application configuration file - $PWD/config/application.properties 
..................................................................................

You can store application configuration inside config/application.properties file.
config folder must be present in the root dir of application.

config-app
  |
  config
    |
    application.properties
       greeting.message=Hello,From Config Folder application.properties

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name="greeting.message",defaultValue = "Hey")
    String message;
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName(){
        return ConfigProvider.getConfig().getOptionalValue("app.user.name",String.class).orElse("Name");
    }
}

.....................................................................................
			src/main/resources/application.properties -(250)
.....................................................................................

#configuration data
greeting.message=Hello,How are You?
app.user.name =Subramanian


#configuration data
greeting.message=Hello,How are You?
app.user.name =Subramanian
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Welcome to Quarkus")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName() {
        return ConfigProvider.getConfig().getOptionalValue("app.user.name", String.class).orElse("Default Name");
    }
}
.....................................................................................
 (100)MicroProfile Config Configuration file META-INF/microprofile-config.properties                           in class path
....................................................................................

It has the lowest ordinal value when comapre to other configurations

microprofile-config.properties
  |
 greeting.message=Hello,From MicroProfile Configuration

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.ConfigProvider;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Welcome")
    String message;


    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }

    @GET
    @Path("name")
    public String getName() {
        return ConfigProvider.getConfig()
                .getOptionalValue("app.user.name", String.class).orElse("Sweety");

    }
}
.....................................................................................
			How property search begins
.....................................................................................

Flow
    message.greeting

   System Properties
	|
        Environment variables
		|
		.env File
		   |
		   config/application.properties
		    |
		    resources/application.properties
			|
			microprofile.properties
			  |
	  ConfigProperty(name = "greeting.message", defaultValue = "Default Message")
			  |
			   default value to be picked up

............................................................................................
....................................................................................
			Advanced config sources
....................................................................................

1.YAML Configuration
2.Third party configuration stores

1.YAML Config

 YAML is popular configuration format in dev ops like env.
 Kuberets and docker relies on heavily on the YAML format to write various resource descriptions.


quarkus create  app config-yaml

Open project in ide, and delete application.properties

add 

application.yml
greeting:
  message: "Hello,Yaml"

in order to read yml file, we need to install dependency.

quarkus ext add config-yaml


package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message",defaultValue = "Welcome to YML")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}
...................................................................................
			  External Configuration Infrastructure
...................................................................................

As of now we have discussed application configuration within application itself.

In case of microservices, we need to store centeralized config information which is used by many microservices - Distributed configuration...


There are many configuration sources available

1.Hashicorp vault
2.Consul
3.Spring Cloud Config
etc...

I am going to show Consul based configuration

Req:

1.Docker

Step:
1.create project 

quarkus create app config-consul

2.install consul dependency
 quarkus ext add config-consul

3.Start consul server via docker

docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501

After start consul.

Test the consul in the follwing address

http://localhost:8500


4.we have to connect to consul server, for that we need to configure consul properties in application.properties

#consul server configuration

quarkus.application.name=consul-test
quarkus.consul-config.enabled=true
quarkus.consul-config.properties-value-keys=config/${quarkus.application.name}

5.Inside consul server
-->key/value

key/folder
  config/consul-test
value
 greeting.message=Hello,From Consul

 
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Default Value")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}

start server

quarkus dev

http://localhost:8080/hello

Response:
Hello From Consul.

.....................................................................................
									Profiles 
....................................................................................
We often need to configure our application differently depending on the target enviroment.

For eg, the local development env may be different from the production enviroment.

configuration profiles allow for mulitple configurations in the same file or separate files and select between via profile name.

Profile in the property name:

To be able to set properties with same name, each property needs to be prefixed with a percentage sign % followed by the profile name and a dot .

%{profile-name}.property.name

eg:
%dev.greeting.message=Hello,Dev
%prod.greeting.message=Hello,Prod

Profile names in ".env" file

_DEV_GREETING_MESSAGE=Hello,Dev
_PROD_GREETING_MESSAGE=Hello,Prod

............
Default Profiles:

1.dev
2.test
3.prod

You can define custom profiles also

%staging.property =value

What if i want to store more properties in the same file?

 It is not good idea to dump more profile information inside application.properties

Profile aware files:
...................

application.properties
application-dev.properties
application-prod.properties


eg:
application.properties
%dev.greeting.message=Hello,Dev
%prod.greeting.message=Hello,Prod

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.config.inject.ConfigProperty;

@Path("/hello")
public class GreetingResource {

    @ConfigProperty(name = "greeting.message", defaultValue = "Default value")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return message;
    }
}


Testing:

quarkus dev 

quarkus build --no-tests

java -jar target/quarkus-app/quarkus-run.jar

....................................&&&&&&&&&&&&&&&..................................





